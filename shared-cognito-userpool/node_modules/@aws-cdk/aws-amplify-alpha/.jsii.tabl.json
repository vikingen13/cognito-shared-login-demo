{
  "version": "2",
  "toolVersion": "1.55.1",
  "snippets": {
    "ae0a47998c7c6aeee7597f86c717708f37744390b81f2531db890ee92eef192b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\n\n\namplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    build_spec=codebuild.BuildSpec.from_object_to_yaml({\n        # Alternatively add a `amplify.yml` to the repo\n        \"version\": \"1.0\",\n        \"frontend\": {\n            \"phases\": {\n                \"pre_build\": {\n                    \"commands\": [\"yarn\"\n                    ]\n                },\n                \"build\": {\n                    \"commands\": [\"yarn build\"\n                    ]\n                }\n            },\n            \"artifacts\": {\n                \"base_directory\": \"public\",\n                \"files\": -\"**/*\"\n            }\n        }\n    })\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\n\n\nApp amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    BuildSpec = BuildSpec.FromObjectToYaml(new Dictionary<string, object> {\n        // Alternatively add a `amplify.yml` to the repo\n        { \"version\", \"1.0\" },\n        { \"frontend\", new Dictionary<string, IDictionary<string, IDictionary<string, string[]>>> {\n            { \"phases\", new Struct {\n                PreBuild = new Struct {\n                    Commands = new [] { \"yarn\" }\n                },\n                Build = new Struct {\n                    Commands = new [] { \"yarn build\" }\n                }\n            } },\n            { \"artifacts\", new Struct {\n                BaseDirectory = \"public\",\n                Files = -\"**/*\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\n\n\nApp amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .buildSpec(BuildSpec.fromObjectToYaml(Map.of(\n                // Alternatively add a `amplify.yml` to the repo\n                \"version\", \"1.0\",\n                \"frontend\", Map.of(\n                        \"phases\", Map.of(\n                                \"preBuild\", Map.of(\n                                        \"commands\", List.of(\"yarn\")),\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"yarn build\"))),\n                        \"artifacts\", Map.of(\n                                \"baseDirectory\", \"public\",\n                                \"files\", -\"**/*\")))))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codebuild \"github.com/aws/aws-cdk-go/awscdk\"\n\namplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tbuildSpec: codebuild.buildSpec.fromObjectToYaml(map[string]interface{}{\n\t\t// Alternatively add a `amplify.yml` to the repo\n\t\t\"version\": jsii.String(\"1.0\"),\n\t\t\"frontend\": map[string]map[string]map[string][]*string{\n\t\t\t\"phases\": map[string]map[string][]*string{\n\t\t\t\t\"preBuild\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"yarn\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"build\": map[string][]*string{\n\t\t\t\t\t\"commands\": []*string{\n\t\t\t\t\t\tjsii.String(\"yarn build\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"artifacts\": map[string]interface{}{\n\t\t\t\t\"baseDirectory\": jsii.String(\"public\"),\n\t\t\t\t\"files\": -jsii.String(\"**/*\"),\n\t\t\t},\n\t\t},\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from 'aws-cdk-lib/aws-codebuild';\n\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  buildSpec: codebuild.BuildSpec.fromObjectToYaml({\n    // Alternatively add a `amplify.yml` to the repo\n    version: '1.0',\n    frontend: {\n      phases: {\n        preBuild: {\n          commands: [\n            'yarn',\n          ],\n        },\n        build: {\n          commands: [\n            'yarn build',\n          ],\n        },\n      },\n      artifacts: {\n        baseDirectory: 'public',\n        files:\n        - '**/*',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager",
        "aws-cdk-lib.aws_codebuild.BuildSpec",
        "aws-cdk-lib.aws_codebuild.BuildSpec#fromObjectToYaml"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from 'aws-cdk-lib/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  buildSpec: codebuild.BuildSpec.fromObjectToYaml({\n    // Alternatively add a `amplify.yml` to the repo\n    version: '1.0',\n    frontend: {\n      phases: {\n        preBuild: {\n          commands: [\n            'yarn',\n          ],\n        },\n        build: {\n          commands: [\n            'yarn build',\n          ],\n        },\n      },\n      artifacts: {\n        baseDirectory: 'public',\n        files:\n        - '**/*',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 26,
        "104": 1,
        "192": 2,
        "193": 8,
        "194": 5,
        "196": 2,
        "197": 2,
        "207": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "80a403d93d5897400d13978de50b0efa6dfad0e7f45ca486be55a850b427d543"
    },
    "2780923d9b3daadb51eb01d4a2b726e577a4564df1502f7c4fa3c62a50da67fa": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitLabSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-gitlab-token\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitLabSourceCodeProvider(new GitLabSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-gitlab-token\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitLabSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-gitlab-token\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitLabSourceCodeProvider(&gitLabSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-gitlab-token\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitLabSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-gitlab-token'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 61
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitLabSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-gitlab-token'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c3a044f0ebb93ff6f45ced4d239855cf72b21057ffdf6510d8b84b6e3dabb7c5"
    },
    "dca503568d5801236289d73fe0f69ab64bbd157a4f0bf447c8661838e8dfaf58": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n\nrepository = codecommit.Repository(self, \"Repo\",\n    repository_name=\"my-repo\"\n)\n\namplify_app = amplify.App(self, \"App\",\n    source_code_provider=amplify.CodeCommitSourceCodeProvider(repository=repository)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repository = new Repository(this, \"Repo\", new RepositoryProps {\n    RepositoryName = \"my-repo\"\n});\n\nApp amplifyApp = new App(this, \"App\", new AppProps {\n    SourceCodeProvider = new CodeCommitSourceCodeProvider(new CodeCommitSourceCodeProviderProps { Repository = repository })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repository = Repository.Builder.create(this, \"Repo\")\n        .repositoryName(\"my-repo\")\n        .build();\n\nApp amplifyApp = App.Builder.create(this, \"App\")\n        .sourceCodeProvider(CodeCommitSourceCodeProvider.Builder.create().repository(repository).build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codecommit \"github.com/aws/aws-cdk-go/awscdk\"\n\nrepository := codecommit.NewRepository(this, jsii.String(\"Repo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"my-repo\"),\n})\n\namplifyApp := amplify.NewApp(this, jsii.String(\"App\"), &appProps{\n\tsourceCodeProvider: amplify.NewCodeCommitSourceCodeProvider(&codeCommitSourceCodeProviderProps{\n\t\trepository: repository,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from 'aws-cdk-lib/aws-codecommit';\n\nconst repository = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'my-repo',\n});\n\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.CodeCommitSourceCodeProvider({ repository }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 73
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.aws_codecommit.IRepository",
        "aws-cdk-lib.aws_codecommit.Repository",
        "aws-cdk-lib.aws_codecommit.RepositoryProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from 'aws-cdk-lib/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repository = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'my-repo',\n});\n\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.CodeCommitSourceCodeProvider({ repository }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 2,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "09b311ff47391a00a2b563479ceabb32802a59c56a31d2a39b7dd6cf41689daf"
    },
    "fab02c788d48a4ac53487ccdaae36fb76f227babc426f93dbc739a5a36991963": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\n\nmaster = amplify_app.add_branch(\"master\") # `id` will be used as repo branch name\ndev = amplify_app.add_branch(\"dev\",\n    performance_mode=True\n)\ndev.add_environment(\"STAGE\", \"dev\")",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\n\nBranch master = amplifyApp.AddBranch(\"master\"); // `id` will be used as repo branch name\nBranch dev = amplifyApp.AddBranch(\"dev\", new BranchOptions {\n    PerformanceMode = true\n});\ndev.AddEnvironment(\"STAGE\", \"dev\");",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\n\nBranch master = amplifyApp.addBranch(\"master\"); // `id` will be used as repo branch name\nBranch dev = amplifyApp.addBranch(\"dev\", BranchOptions.builder()\n        .performanceMode(true)\n        .build());\ndev.addEnvironment(\"STAGE\", \"dev\");",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\n\nmaster := amplifyApp.addBranch(jsii.String(\"master\")) // `id` will be used as repo branch name\ndev := amplifyApp.addBranch(jsii.String(\"dev\"), &branchOptions{\n\tperformanceMode: jsii.Boolean(true),\n})\ndev.addEnvironment(jsii.String(\"STAGE\"), jsii.String(\"dev\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\n\nconst master = amplifyApp.addBranch('master'); // `id` will be used as repo branch name\nconst dev = amplifyApp.addBranch('dev', {\n  performanceMode: true, // optional, enables performance mode\n});\ndev.addEnvironment('STAGE', 'dev');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 90
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addBranch",
        "@aws-cdk/aws-amplify-alpha.Branch",
        "@aws-cdk/aws-amplify-alpha.Branch#addEnvironment",
        "@aws-cdk/aws-amplify-alpha.BranchOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst master = amplifyApp.addBranch('master'); // `id` will be used as repo branch name\nconst dev = amplifyApp.addBranch('dev', {\n  performanceMode: true, // optional, enables performance mode\n});\ndev.addEnvironment('STAGE', 'dev');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cbab258598987e99cdbd60902afa43ee0d6acf496eea9652b34bcefb064005f6"
    },
    "ca0e950c696e7642ebc589aca4c81e4df3abd723dbe676eb7e8e6b499c030e99": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\namplify_app.add_custom_rule({\n    \"source\": \"/docs/specific-filename.html\",\n    \"target\": \"/documents/different-filename.html\",\n    \"status\": amplify.RedirectStatus.TEMPORARY_REDIRECT\n})",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\namplifyApp.AddCustomRule(new Dictionary<string, object> {\n    { \"source\", \"/docs/specific-filename.html\" },\n    { \"target\", \"/documents/different-filename.html\" },\n    { \"status\", RedirectStatus.TEMPORARY_REDIRECT }\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\namplifyApp.addCustomRule(Map.of(\n        \"source\", \"/docs/specific-filename.html\",\n        \"target\", \"/documents/different-filename.html\",\n        \"status\", RedirectStatus.TEMPORARY_REDIRECT));",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\namplifyApp.addCustomRule(map[string]interface{}{\n\t\"source\": jsii.String(\"/docs/specific-filename.html\"),\n\t\"target\": jsii.String(\"/documents/different-filename.html\"),\n\t\"status\": amplify.RedirectStatus_TEMPORARY_REDIRECT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\namplifyApp.addCustomRule({\n  source: '/docs/specific-filename.html',\n  target: '/documents/different-filename.html',\n  status: amplify.RedirectStatus.TEMPORARY_REDIRECT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 104
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addCustomRule",
        "@aws-cdk/aws-amplify-alpha.CustomRule",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus#TEMPORARY_REDIRECT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\namplifyApp.addCustomRule({\n  source: '/docs/specific-filename.html',\n  target: '/documents/different-filename.html',\n  status: amplify.RedirectStatus.TEMPORARY_REDIRECT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d9207b8ec4a2ae96e3228e62c0617c96848b7cdc4763fd5f7e8a2f75fa1bb9a"
    },
    "b47421ae9605a84bb60a82f1c43dfe83c20820d28567eb72b6a37b05f81ac112": {
      "translations": {
        "python": {
          "source": "# my_single_page_app: amplify.App\n\n\nmy_single_page_app.add_custom_rule(amplify.CustomRule.SINGLE_PAGE_APPLICATION_REDIRECT)",
          "version": "2"
        },
        "csharp": {
          "source": "App mySinglePageApp;\n\n\nmySinglePageApp.AddCustomRule(CustomRule.SINGLE_PAGE_APPLICATION_REDIRECT);",
          "version": "1"
        },
        "java": {
          "source": "App mySinglePageApp;\n\n\nmySinglePageApp.addCustomRule(CustomRule.SINGLE_PAGE_APPLICATION_REDIRECT);",
          "version": "1"
        },
        "go": {
          "source": "var mySinglePageApp app\n\nmySinglePageApp.addCustomRule(amplify.customRule_SINGLE_PAGE_APPLICATION_REDIRECT())",
          "version": "1"
        },
        "$": {
          "source": "declare const mySinglePageApp: amplify.App;\n\nmySinglePageApp.addCustomRule(amplify.CustomRule.SINGLE_PAGE_APPLICATION_REDIRECT);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 119
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addCustomRule",
        "@aws-cdk/aws-amplify-alpha.CustomRule",
        "@aws-cdk/aws-amplify-alpha.CustomRule#SINGLE_PAGE_APPLICATION_REDIRECT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySinglePageApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmySinglePageApp.addCustomRule(amplify.CustomRule.SINGLE_PAGE_APPLICATION_REDIRECT);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "43948fc90e9e4863e9416ba5f085de197f65e3316164f84fc9b4bce0bfac401b"
    },
    "cf0af13376d9b94b1f55a9721aa36b893a33a41d9ad0a9e3e0c87b45263a7996": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n# master: amplify.Branch\n# dev: amplify.Branch\n\n\ndomain = amplify_app.add_domain(\"example.com\",\n    enable_auto_subdomain=True,  # in case subdomains should be auto registered for branches\n    auto_subdomain_creation_patterns=[\"*\", \"pr*\"]\n)\ndomain.map_root(master) # map master branch to domain root\ndomain.map_sub_domain(master, \"www\")\ndomain.map_sub_domain(dev)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\nBranch master;\nBranch dev;\n\n\nDomain domain = amplifyApp.AddDomain(\"example.com\", new DomainOptions {\n    EnableAutoSubdomain = true,  // in case subdomains should be auto registered for branches\n    AutoSubdomainCreationPatterns = new [] { \"*\", \"pr*\" }\n});\ndomain.MapRoot(master); // map master branch to domain root\ndomain.MapSubDomain(master, \"www\");\ndomain.MapSubDomain(dev);",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\nBranch master;\nBranch dev;\n\n\nDomain domain = amplifyApp.addDomain(\"example.com\", DomainOptions.builder()\n        .enableAutoSubdomain(true) // in case subdomains should be auto registered for branches\n        .autoSubdomainCreationPatterns(List.of(\"*\", \"pr*\"))\n        .build());\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, \"www\");\ndomain.mapSubDomain(dev);",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\nvar master branch\nvar dev branch\n\ndomain := amplifyApp.addDomain(jsii.String(\"example.com\"), &domainOptions{\n\tenableAutoSubdomain: jsii.Boolean(true),\n\t // in case subdomains should be auto registered for branches\n\tautoSubdomainCreationPatterns: []*string{\n\t\tjsii.String(\"*\"),\n\t\tjsii.String(\"pr*\"),\n\t},\n})\ndomain.mapRoot(master) // map master branch to domain root\ndomain.mapSubDomain(master, jsii.String(\"www\"))\ndomain.mapSubDomain(dev)",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\ndeclare const master: amplify.Branch;\ndeclare const dev: amplify.Branch;\n\nconst domain = amplifyApp.addDomain('example.com', {\n  enableAutoSubdomain: true, // in case subdomains should be auto registered for branches\n  autoSubdomainCreationPatterns: ['*', 'pr*'], // regex for branches that should auto register subdomains\n});\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, 'www');\ndomain.mapSubDomain(dev); // sub domain prefix defaults to branch name",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 127
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addDomain",
        "@aws-cdk/aws-amplify-alpha.Domain",
        "@aws-cdk/aws-amplify-alpha.Domain#mapRoot",
        "@aws-cdk/aws-amplify-alpha.Domain#mapSubDomain",
        "@aws-cdk/aws-amplify-alpha.DomainOptions",
        "@aws-cdk/aws-amplify-alpha.IBranch"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\ndeclare const master: amplify.Branch;\ndeclare const dev: amplify.Branch;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst domain = amplifyApp.addDomain('example.com', {\n  enableAutoSubdomain: true, // in case subdomains should be auto registered for branches\n  autoSubdomainCreationPatterns: ['*', 'pr*'], // regex for branches that should auto register subdomains\n});\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, 'www');\ndomain.mapSubDomain(dev);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 4,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b3de53d22c6919d98c4bd00545bdbde54b0737b22d7b148a45bd88919af6746f"
    },
    "d00693850e4c03dc3a5182706fa7079664d08b20d59220180cef9b85acd73ebb": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    basic_auth=amplify.BasicAuth.from_credentials(\"username\", SecretValue.secrets_manager(\"my-github-token\"))\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    BasicAuth = BasicAuth.FromCredentials(\"username\", SecretValue.SecretsManager(\"my-github-token\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .basicAuth(BasicAuth.fromCredentials(\"username\", SecretValue.secretsManager(\"my-github-token\")))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tbasicAuth: amplify.basicAuth.fromCredentials(jsii.String(\"username\"), *secretValue.secretsManager(jsii.String(\"my-github-token\"))),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  basicAuth: amplify.BasicAuth.fromCredentials('username', SecretValue.secretsManager('my-github-token')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 147
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.BasicAuth",
        "@aws-cdk/aws-amplify-alpha.BasicAuth#fromCredentials",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  basicAuth: amplify.BasicAuth.fromCredentials('username', SecretValue.secretsManager('my-github-token')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "ab97ae17357ea836dc1571eb122312c8e63e919be9e1f8ef184f3e15b5f7d284"
    },
    "95a7c5d30b65a6520d777945b5a964ae52959070b7c32fdf700c7276469d836f": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    basic_auth=amplify.BasicAuth.from_generated_password(\"username\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    BasicAuth = BasicAuth.FromGeneratedPassword(\"username\")\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .basicAuth(BasicAuth.fromGeneratedPassword(\"username\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tbasicAuth: amplify.basicAuth.fromGeneratedPassword(jsii.String(\"username\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 160
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.BasicAuth",
        "@aws-cdk/aws-amplify-alpha.BasicAuth#fromGeneratedPassword",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "a481223652b51af18c0b21f31d3f8468204a6cbf517bea4e1d63f2062e9cb808"
    },
    "76c3f1e405f112935d403e5e0391451f9258eac2005cf840da3ea69bd524f716": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\namplify_app.add_branch(\"feature/next\",\n    basic_auth=amplify.BasicAuth.from_generated_password(\"username\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\namplifyApp.AddBranch(\"feature/next\", new BranchOptions {\n    BasicAuth = BasicAuth.FromGeneratedPassword(\"username\")\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\namplifyApp.addBranch(\"feature/next\", BranchOptions.builder()\n        .basicAuth(BasicAuth.fromGeneratedPassword(\"username\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\namplifyApp.addBranch(jsii.String(\"feature/next\"), &branchOptions{\n\tbasicAuth: amplify.basicAuth.fromGeneratedPassword(jsii.String(\"username\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\namplifyApp.addBranch('feature/next', {\n  basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 173
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addBranch",
        "@aws-cdk/aws-amplify-alpha.BasicAuth",
        "@aws-cdk/aws-amplify-alpha.BasicAuth#fromGeneratedPassword",
        "@aws-cdk/aws-amplify-alpha.BranchOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\namplifyApp.addBranch('feature/next', {\n  basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b6eef07250bb054f19f1cf97f20c1ee50f125c7efe2efd016e57850fcefd69bb"
    },
    "9c15381a4bec1e3647cb6d7e24642faa08c1a72902471dc25b79b297de0ec84e": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    auto_branch_creation=amplify.AutoBranchCreation( # Automatically connect branches that match a pattern set\n        patterns=[\"feature/*\", \"test/*\"]),\n    auto_branch_deletion=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    AutoBranchCreation = new AutoBranchCreation {  // Automatically connect branches that match a pattern set\n        Patterns = new [] { \"feature/*\", \"test/*\" } },\n    AutoBranchDeletion = true\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .autoBranchCreation(AutoBranchCreation.builder() // Automatically connect branches that match a pattern set\n                .patterns(List.of(\"feature/*\", \"test/*\")).build())\n        .autoBranchDeletion(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tautoBranchCreation: &autoBranchCreation{\n\t\t // Automatically connect branches that match a pattern set\n\t\tpatterns: []*string{\n\t\t\tjsii.String(\"feature/*\"),\n\t\t\tjsii.String(\"test/*\"),\n\t\t},\n\t},\n\tautoBranchDeletion: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 185
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.AutoBranchCreation",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f7411fc8c8ccf9f8ca4c55bcabe52718fc6f9adbb957704f6ad42be2ad37bfbc"
    },
    "15045c1e3feb2799bd83c11cbf92ae85dff75a130de63d854543ddfbd169e3f6": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"App\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    custom_response_headers=[amplify.CustomResponseHeader(\n        pattern=\"*.json\",\n        headers={\n            \"custom-header-name-1\": \"custom-header-value-1\",\n            \"custom-header-name-2\": \"custom-header-value-2\"\n        }\n    ), amplify.CustomResponseHeader(\n        pattern=\"/path/*\",\n        headers={\n            \"custom-header-name-1\": \"custom-header-value-2\"\n        }\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"App\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    CustomResponseHeaders = new [] { new CustomResponseHeader {\n        Pattern = \"*.json\",\n        Headers = new Dictionary<string, string> {\n            { \"custom-header-name-1\", \"custom-header-value-1\" },\n            { \"custom-header-name-2\", \"custom-header-value-2\" }\n        }\n    }, new CustomResponseHeader {\n        Pattern = \"/path/*\",\n        Headers = new Dictionary<string, string> {\n            { \"custom-header-name-1\", \"custom-header-value-2\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"App\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .customResponseHeaders(List.of(CustomResponseHeader.builder()\n                .pattern(\"*.json\")\n                .headers(Map.of(\n                        \"custom-header-name-1\", \"custom-header-value-1\",\n                        \"custom-header-name-2\", \"custom-header-value-2\"))\n                .build(), CustomResponseHeader.builder()\n                .pattern(\"/path/*\")\n                .headers(Map.of(\n                        \"custom-header-name-1\", \"custom-header-value-2\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"App\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tcustomResponseHeaders: []customResponseHeader{\n\t\t&customResponseHeader{\n\t\t\tpattern: jsii.String(\"*.json\"),\n\t\t\theaders: map[string]*string{\n\t\t\t\t\"custom-header-name-1\": jsii.String(\"custom-header-value-1\"),\n\t\t\t\t\"custom-header-name-2\": jsii.String(\"custom-header-value-2\"),\n\t\t\t},\n\t\t},\n\t\t&customResponseHeader{\n\t\t\tpattern: jsii.String(\"/path/*\"),\n\t\t\theaders: map[string]*string{\n\t\t\t\t\"custom-header-name-1\": jsii.String(\"custom-header-value-2\"),\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  customResponseHeaders: [\n    {\n      pattern: '*.json',\n      headers: {\n        'custom-header-name-1': 'custom-header-value-1',\n        'custom-header-name-2': 'custom-header-value-2',\n      },\n    },\n    {\n      pattern: '/path/*',\n      headers: {\n        'custom-header-name-1': 'custom-header-value-2',\n      },\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 203
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  customResponseHeaders: [\n    {\n      pattern: '*.json',\n      headers: {\n        'custom-header-name-1': 'custom-header-value-1',\n        'custom-header-name-2': 'custom-header-value-2',\n      },\n    },\n    {\n      pattern: '/path/*',\n      headers: {\n        'custom-header-name-1': 'custom-header-value-2',\n      },\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 12,
        "75": 16,
        "104": 1,
        "192": 1,
        "193": 6,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 12
      },
      "fqnsFingerprint": "bb86bb3b6b8014af822d779d242a52359766f1516736ac1a1d1a91654c4da52c"
    },
    "e4736e8b9618464ee04f4682c2258a1e23dc272bf39c5dc134f97fed4d942fed": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3_assets as assets\n\n# asset: assets.Asset\n# amplify_app: amplify.App\n\nbranch = amplify_app.add_branch(\"dev\", asset=asset)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nAsset asset;\nApp amplifyApp;\n\nBranch branch = amplifyApp.AddBranch(\"dev\", new BranchOptions { Asset = asset });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.*;\n\nAsset asset;\nApp amplifyApp;\n\nBranch branch = amplifyApp.addBranch(\"dev\", BranchOptions.builder().asset(asset).build());",
          "version": "1"
        },
        "go": {
          "source": "import assets \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar asset asset\nvar amplifyApp app\nbranch := amplifyApp.addBranch(jsii.String(\"dev\"), &branchOptions{\n\tasset: asset,\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as assets from 'aws-cdk-lib/aws-s3-assets';\n\ndeclare const asset: assets.Asset;\ndeclare const amplifyApp: amplify.App;\nconst branch = amplifyApp.addBranch(\"dev\", { asset: asset });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-amplify-alpha"
        },
        "field": {
          "field": "markdown",
          "line": 232
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addBranch",
        "@aws-cdk/aws-amplify-alpha.Branch",
        "@aws-cdk/aws-amplify-alpha.BranchOptions",
        "aws-cdk-lib.aws_s3_assets.Asset"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as assets from 'aws-cdk-lib/aws-s3-assets';\n\ndeclare const asset: assets.Asset;\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst branch = amplifyApp.addBranch(\"dev\", { asset: asset });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0c314f1c27217efe20778dfdcfa5a1f57db1d370da68abb6d0aae178df5818b3"
    },
    "4af8228baf7341a9ef1c699928bd8a68c0dff0ba3943d62483b2e2049e2e6937": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    auto_branch_creation=amplify.AutoBranchCreation( # Automatically connect branches that match a pattern set\n        patterns=[\"feature/*\", \"test/*\"]),\n    auto_branch_deletion=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    AutoBranchCreation = new AutoBranchCreation {  // Automatically connect branches that match a pattern set\n        Patterns = new [] { \"feature/*\", \"test/*\" } },\n    AutoBranchDeletion = true\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .autoBranchCreation(AutoBranchCreation.builder() // Automatically connect branches that match a pattern set\n                .patterns(List.of(\"feature/*\", \"test/*\")).build())\n        .autoBranchDeletion(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tautoBranchCreation: &autoBranchCreation{\n\t\t // Automatically connect branches that match a pattern set\n\t\tpatterns: []*string{\n\t\t\tjsii.String(\"feature/*\"),\n\t\t\tjsii.String(\"test/*\"),\n\t\t},\n\t},\n\tautoBranchDeletion: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.App"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.AutoBranchCreation",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f7411fc8c8ccf9f8ca4c55bcabe52718fc6f9adbb957704f6ad42be2ad37bfbc"
    },
    "b27886540437cc80ad3ef7fe15e084d51df4d770ea2bef9f51e76af7b9a19d45": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    auto_branch_creation=amplify.AutoBranchCreation( # Automatically connect branches that match a pattern set\n        patterns=[\"feature/*\", \"test/*\"]),\n    auto_branch_deletion=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    AutoBranchCreation = new AutoBranchCreation {  // Automatically connect branches that match a pattern set\n        Patterns = new [] { \"feature/*\", \"test/*\" } },\n    AutoBranchDeletion = true\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .autoBranchCreation(AutoBranchCreation.builder() // Automatically connect branches that match a pattern set\n                .patterns(List.of(\"feature/*\", \"test/*\")).build())\n        .autoBranchDeletion(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tautoBranchCreation: &autoBranchCreation{\n\t\t // Automatically connect branches that match a pattern set\n\t\tpatterns: []*string{\n\t\t\tjsii.String(\"feature/*\"),\n\t\t\tjsii.String(\"test/*\"),\n\t\t},\n\t},\n\tautoBranchDeletion: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.AppProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.AutoBranchCreation",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f7411fc8c8ccf9f8ca4c55bcabe52718fc6f9adbb957704f6ad42be2ad37bfbc"
    },
    "9e5410d9166b9a627db322ad7b4a952160b7f77c03f51da3c53922c8dc9bba86": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    auto_branch_creation=amplify.AutoBranchCreation( # Automatically connect branches that match a pattern set\n        patterns=[\"feature/*\", \"test/*\"]),\n    auto_branch_deletion=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    AutoBranchCreation = new AutoBranchCreation {  // Automatically connect branches that match a pattern set\n        Patterns = new [] { \"feature/*\", \"test/*\" } },\n    AutoBranchDeletion = true\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .autoBranchCreation(AutoBranchCreation.builder() // Automatically connect branches that match a pattern set\n                .patterns(List.of(\"feature/*\", \"test/*\")).build())\n        .autoBranchDeletion(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tautoBranchCreation: &autoBranchCreation{\n\t\t // Automatically connect branches that match a pattern set\n\t\tpatterns: []*string{\n\t\t\tjsii.String(\"feature/*\"),\n\t\t\tjsii.String(\"test/*\"),\n\t\t},\n\t},\n\tautoBranchDeletion: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.AutoBranchCreation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.AutoBranchCreation",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f7411fc8c8ccf9f8ca4c55bcabe52718fc6f9adbb957704f6ad42be2ad37bfbc"
    },
    "ace7ea7c1c7d157d3fc538b8e8e544a55f79194b891f076908d8d020687c6b0c": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    basic_auth=amplify.BasicAuth.from_generated_password(\"username\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    BasicAuth = BasicAuth.FromGeneratedPassword(\"username\")\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .basicAuth(BasicAuth.fromGeneratedPassword(\"username\"))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tbasicAuth: amplify.basicAuth.fromGeneratedPassword(jsii.String(\"username\")),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.BasicAuth"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.BasicAuth",
        "@aws-cdk/aws-amplify-alpha.BasicAuth#fromGeneratedPassword",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  basicAuth: amplify.BasicAuth.fromGeneratedPassword('username'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "a481223652b51af18c0b21f31d3f8468204a6cbf517bea4e1d63f2062e9cb808"
    },
    "2723aa20b6a420377967a36cb8c855ef196c9e426752f62eecac36b0fc9a7c99": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\n\nbasic_auth_config = amplify_alpha.BasicAuthConfig(\n    enable_basic_auth=False,\n    password=\"password\",\n    username=\"username\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\n\nBasicAuthConfig basicAuthConfig = new BasicAuthConfig {\n    EnableBasicAuth = false,\n    Password = \"password\",\n    Username = \"username\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\n\nBasicAuthConfig basicAuthConfig = BasicAuthConfig.builder()\n        .enableBasicAuth(false)\n        .password(\"password\")\n        .username(\"username\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"\nbasicAuthConfig := &basicAuthConfig{\n\tenableBasicAuth: jsii.Boolean(false),\n\tpassword: jsii.String(\"password\"),\n\tusername: jsii.String(\"username\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nconst basicAuthConfig: amplify_alpha.BasicAuthConfig = {\n  enableBasicAuth: false,\n  password: 'password',\n  username: 'username',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.BasicAuthConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.BasicAuthConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basicAuthConfig: amplify_alpha.BasicAuthConfig = {\n  enableBasicAuth: false,\n  password: 'password',\n  username: 'username',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0986c98abbd97ea525326049b56c7549704fd48eeeee041f283803a63a5e6847"
    },
    "e4a90c7ddcff1a273bc6c1f9bcb15554bf0c279fb2a500e46d850e6eaf4333d0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\nimport aws_cdk as cdk\nfrom aws_cdk import aws_kms as kms\n\n# key: kms.Key\n# secret_value: cdk.SecretValue\n\nbasic_auth_props = amplify_alpha.BasicAuthProps(\n    username=\"username\",\n\n    # the properties below are optional\n    encryption_key=key,\n    password=secret_value\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.KMS;\n\nKey key;\nSecretValue secretValue;\n\nBasicAuthProps basicAuthProps = new BasicAuthProps {\n    Username = \"username\",\n\n    // the properties below are optional\n    EncryptionKey = key,\n    Password = secretValue\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\nimport software.amazon.awscdk.*;\nimport software.amazon.awscdk.services.kms.*;\n\nKey key;\nSecretValue secretValue;\n\nBasicAuthProps basicAuthProps = BasicAuthProps.builder()\n        .username(\"username\")\n\n        // the properties below are optional\n        .encryptionKey(key)\n        .password(secretValue)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"import cdk \"github.com/aws/aws-cdk-go/awscdk\"import awscdk \"github.com/aws/aws-cdk-go/awscdk\"import kms \"github.com/aws/aws-cdk-go/awscdk/aws_kms\"\n\nvar key key\nvar secretValue secretValue\nbasicAuthProps := &basicAuthProps{\n\tusername: jsii.String(\"username\"),\n\n\t// the properties below are optional\n\tencryptionKey: key,\n\tpassword: secretValue,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport * as cdk from 'aws-cdk-lib';\nimport { aws_kms as kms } from 'aws-cdk-lib';\n\ndeclare const key: kms.Key;\ndeclare const secretValue: cdk.SecretValue;\nconst basicAuthProps: amplify_alpha.BasicAuthProps = {\n  username: 'username',\n\n  // the properties below are optional\n  encryptionKey: key,\n  password: secretValue,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.BasicAuthProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.BasicAuthProps",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.aws_kms.IKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport * as cdk from 'aws-cdk-lib';\nimport { aws_kms as kms } from 'aws-cdk-lib';\n\ndeclare const key: kms.Key;\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst basicAuthProps: amplify_alpha.BasicAuthProps = {\n  username: 'username',\n\n  // the properties below are optional\n  encryptionKey: key,\n  password: secretValue,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 2,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "262ae4fbb9334f04e86c01dd3ec7440185e7c90bfb1cde325ab1356341796925"
    },
    "88b235c338bbeeab34b9a6489987ddaccd4be3ff14f963760b6df1bbfbe18029": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\n\nmaster = amplify_app.add_branch(\"master\") # `id` will be used as repo branch name\ndev = amplify_app.add_branch(\"dev\",\n    performance_mode=True\n)\ndev.add_environment(\"STAGE\", \"dev\")",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\n\nBranch master = amplifyApp.AddBranch(\"master\"); // `id` will be used as repo branch name\nBranch dev = amplifyApp.AddBranch(\"dev\", new BranchOptions {\n    PerformanceMode = true\n});\ndev.AddEnvironment(\"STAGE\", \"dev\");",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\n\nBranch master = amplifyApp.addBranch(\"master\"); // `id` will be used as repo branch name\nBranch dev = amplifyApp.addBranch(\"dev\", BranchOptions.builder()\n        .performanceMode(true)\n        .build());\ndev.addEnvironment(\"STAGE\", \"dev\");",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\n\nmaster := amplifyApp.addBranch(jsii.String(\"master\")) // `id` will be used as repo branch name\ndev := amplifyApp.addBranch(jsii.String(\"dev\"), &branchOptions{\n\tperformanceMode: jsii.Boolean(true),\n})\ndev.addEnvironment(jsii.String(\"STAGE\"), jsii.String(\"dev\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\n\nconst master = amplifyApp.addBranch('master'); // `id` will be used as repo branch name\nconst dev = amplifyApp.addBranch('dev', {\n  performanceMode: true, // optional, enables performance mode\n});\ndev.addEnvironment('STAGE', 'dev');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.Branch"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addBranch",
        "@aws-cdk/aws-amplify-alpha.Branch",
        "@aws-cdk/aws-amplify-alpha.Branch#addEnvironment",
        "@aws-cdk/aws-amplify-alpha.BranchOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst master = amplifyApp.addBranch('master'); // `id` will be used as repo branch name\nconst dev = amplifyApp.addBranch('dev', {\n  performanceMode: true, // optional, enables performance mode\n});\ndev.addEnvironment('STAGE', 'dev');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cbab258598987e99cdbd60902afa43ee0d6acf496eea9652b34bcefb064005f6"
    },
    "ba3ac9fbce45383cee180a92ac0881e93d34fae1bf188f72f87e55e81ec0139a": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\n\nmaster = amplify_app.add_branch(\"master\") # `id` will be used as repo branch name\ndev = amplify_app.add_branch(\"dev\",\n    performance_mode=True\n)\ndev.add_environment(\"STAGE\", \"dev\")",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\n\nBranch master = amplifyApp.AddBranch(\"master\"); // `id` will be used as repo branch name\nBranch dev = amplifyApp.AddBranch(\"dev\", new BranchOptions {\n    PerformanceMode = true\n});\ndev.AddEnvironment(\"STAGE\", \"dev\");",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\n\nBranch master = amplifyApp.addBranch(\"master\"); // `id` will be used as repo branch name\nBranch dev = amplifyApp.addBranch(\"dev\", BranchOptions.builder()\n        .performanceMode(true)\n        .build());\ndev.addEnvironment(\"STAGE\", \"dev\");",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\n\nmaster := amplifyApp.addBranch(jsii.String(\"master\")) // `id` will be used as repo branch name\ndev := amplifyApp.addBranch(jsii.String(\"dev\"), &branchOptions{\n\tperformanceMode: jsii.Boolean(true),\n})\ndev.addEnvironment(jsii.String(\"STAGE\"), jsii.String(\"dev\"))",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\n\nconst master = amplifyApp.addBranch('master'); // `id` will be used as repo branch name\nconst dev = amplifyApp.addBranch('dev', {\n  performanceMode: true, // optional, enables performance mode\n});\ndev.addEnvironment('STAGE', 'dev');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.BranchOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addBranch",
        "@aws-cdk/aws-amplify-alpha.Branch",
        "@aws-cdk/aws-amplify-alpha.Branch#addEnvironment",
        "@aws-cdk/aws-amplify-alpha.BranchOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst master = amplifyApp.addBranch('master'); // `id` will be used as repo branch name\nconst dev = amplifyApp.addBranch('dev', {\n  performanceMode: true, // optional, enables performance mode\n});\ndev.addEnvironment('STAGE', 'dev');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cbab258598987e99cdbd60902afa43ee0d6acf496eea9652b34bcefb064005f6"
    },
    "0c1b511b714207463a37ee0c544c73ac64ea7c0cadf4fd319efe08159ea5ad8a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\nfrom aws_cdk import aws_codebuild as codebuild\nfrom aws_cdk import aws_s3_assets as s3_assets\n\n# app: amplify_alpha.App\n# asset: s3_assets.Asset\n# basic_auth: amplify_alpha.BasicAuth\n# build_spec: codebuild.BuildSpec\n\nbranch_props = amplify_alpha.BranchProps(\n    app=app,\n\n    # the properties below are optional\n    asset=asset,\n    auto_build=False,\n    basic_auth=basic_auth,\n    branch_name=\"branchName\",\n    build_spec=build_spec,\n    description=\"description\",\n    environment_variables={\n        \"environment_variables_key\": \"environmentVariables\"\n    },\n    performance_mode=False,\n    pull_request_environment_name=\"pullRequestEnvironmentName\",\n    pull_request_preview=False,\n    stage=\"stage\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.S3.Assets;\n\nApp app;\nAsset asset;\nBasicAuth basicAuth;\nBuildSpec buildSpec;\n\nBranchProps branchProps = new BranchProps {\n    App = app,\n\n    // the properties below are optional\n    Asset = asset,\n    AutoBuild = false,\n    BasicAuth = basicAuth,\n    BranchName = \"branchName\",\n    BuildSpec = buildSpec,\n    Description = \"description\",\n    EnvironmentVariables = new Dictionary<string, string> {\n        { \"environmentVariablesKey\", \"environmentVariables\" }\n    },\n    PerformanceMode = false,\n    PullRequestEnvironmentName = \"pullRequestEnvironmentName\",\n    PullRequestPreview = false,\n    Stage = \"stage\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.s3.assets.*;\n\nApp app;\nAsset asset;\nBasicAuth basicAuth;\nBuildSpec buildSpec;\n\nBranchProps branchProps = BranchProps.builder()\n        .app(app)\n\n        // the properties below are optional\n        .asset(asset)\n        .autoBuild(false)\n        .basicAuth(basicAuth)\n        .branchName(\"branchName\")\n        .buildSpec(buildSpec)\n        .description(\"description\")\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", \"environmentVariables\"))\n        .performanceMode(false)\n        .pullRequestEnvironmentName(\"pullRequestEnvironmentName\")\n        .pullRequestPreview(false)\n        .stage(\"stage\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"import awscdk \"github.com/aws/aws-cdk-go/awscdk\"import codebuild \"github.com/aws/aws-cdk-go/awscdk/aws_codebuild\"import awscdk \"github.com/aws/aws-cdk-go/awscdk\"import s3_assets \"github.com/aws/aws-cdk-go/awscdk/aws_s3_assets\"\n\nvar app app\nvar asset asset\nvar basicAuth basicAuth\nvar buildSpec buildSpec\nbranchProps := &branchProps{\n\tapp: app,\n\n\t// the properties below are optional\n\tasset: asset,\n\tautoBuild: jsii.Boolean(false),\n\tbasicAuth: basicAuth,\n\tbranchName: jsii.String(\"branchName\"),\n\tbuildSpec: buildSpec,\n\tdescription: jsii.String(\"description\"),\n\tenvironmentVariables: map[string]*string{\n\t\t\"environmentVariablesKey\": jsii.String(\"environmentVariables\"),\n\t},\n\tperformanceMode: jsii.Boolean(false),\n\tpullRequestEnvironmentName: jsii.String(\"pullRequestEnvironmentName\"),\n\tpullRequestPreview: jsii.Boolean(false),\n\tstage: jsii.String(\"stage\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport { aws_codebuild as codebuild } from 'aws-cdk-lib';\nimport { aws_s3_assets as s3_assets } from 'aws-cdk-lib';\n\ndeclare const app: amplify_alpha.App;\ndeclare const asset: s3_assets.Asset;\ndeclare const basicAuth: amplify_alpha.BasicAuth;\ndeclare const buildSpec: codebuild.BuildSpec;\nconst branchProps: amplify_alpha.BranchProps = {\n  app: app,\n\n  // the properties below are optional\n  asset: asset,\n  autoBuild: false,\n  basicAuth: basicAuth,\n  branchName: 'branchName',\n  buildSpec: buildSpec,\n  description: 'description',\n  environmentVariables: {\n    environmentVariablesKey: 'environmentVariables',\n  },\n  performanceMode: false,\n  pullRequestEnvironmentName: 'pullRequestEnvironmentName',\n  pullRequestPreview: false,\n  stage: 'stage',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.BranchProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.BasicAuth",
        "@aws-cdk/aws-amplify-alpha.BranchProps",
        "@aws-cdk/aws-amplify-alpha.IApp",
        "aws-cdk-lib.aws_codebuild.BuildSpec",
        "aws-cdk-lib.aws_s3_assets.Asset"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport { aws_codebuild as codebuild } from 'aws-cdk-lib';\nimport { aws_s3_assets as s3_assets } from 'aws-cdk-lib';\n\ndeclare const app: amplify_alpha.App;\ndeclare const asset: s3_assets.Asset;\ndeclare const basicAuth: amplify_alpha.BasicAuth;\ndeclare const buildSpec: codebuild.BuildSpec;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst branchProps: amplify_alpha.BranchProps = {\n  app: app,\n\n  // the properties below are optional\n  asset: asset,\n  autoBuild: false,\n  basicAuth: basicAuth,\n  branchName: 'branchName',\n  buildSpec: buildSpec,\n  description: 'description',\n  environmentVariables: {\n    environmentVariablesKey: 'environmentVariables',\n  },\n  performanceMode: false,\n  pullRequestEnvironmentName: 'pullRequestEnvironmentName',\n  pullRequestPreview: false,\n  stage: 'stage',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 37,
        "91": 3,
        "130": 4,
        "153": 5,
        "169": 5,
        "193": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 1,
        "257": 2,
        "258": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "b067126f3d757914c067711d6c7b7463d2769e4dcbd95ada2aaff8a60bca2826"
    },
    "ea0234fa905c2854b8a8288dfa4b60807b6e8aaf6f6d945bf76d9530d212deae": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n\nrepository = codecommit.Repository(self, \"Repo\",\n    repository_name=\"my-repo\"\n)\n\namplify_app = amplify.App(self, \"App\",\n    source_code_provider=amplify.CodeCommitSourceCodeProvider(repository=repository)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repository = new Repository(this, \"Repo\", new RepositoryProps {\n    RepositoryName = \"my-repo\"\n});\n\nApp amplifyApp = new App(this, \"App\", new AppProps {\n    SourceCodeProvider = new CodeCommitSourceCodeProvider(new CodeCommitSourceCodeProviderProps { Repository = repository })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repository = Repository.Builder.create(this, \"Repo\")\n        .repositoryName(\"my-repo\")\n        .build();\n\nApp amplifyApp = App.Builder.create(this, \"App\")\n        .sourceCodeProvider(CodeCommitSourceCodeProvider.Builder.create().repository(repository).build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codecommit \"github.com/aws/aws-cdk-go/awscdk\"\n\nrepository := codecommit.NewRepository(this, jsii.String(\"Repo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"my-repo\"),\n})\n\namplifyApp := amplify.NewApp(this, jsii.String(\"App\"), &appProps{\n\tsourceCodeProvider: amplify.NewCodeCommitSourceCodeProvider(&codeCommitSourceCodeProviderProps{\n\t\trepository: repository,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from 'aws-cdk-lib/aws-codecommit';\n\nconst repository = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'my-repo',\n});\n\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.CodeCommitSourceCodeProvider({ repository }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.aws_codecommit.IRepository",
        "aws-cdk-lib.aws_codecommit.Repository",
        "aws-cdk-lib.aws_codecommit.RepositoryProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from 'aws-cdk-lib/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repository = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'my-repo',\n});\n\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.CodeCommitSourceCodeProvider({ repository }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 2,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "09b311ff47391a00a2b563479ceabb32802a59c56a31d2a39b7dd6cf41689daf"
    },
    "14b1e3d4bc4ff594f6bcfdadab9d38702bd1bec14f9594b0760ace34d9dd96fb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n\nrepository = codecommit.Repository(self, \"Repo\",\n    repository_name=\"my-repo\"\n)\n\namplify_app = amplify.App(self, \"App\",\n    source_code_provider=amplify.CodeCommitSourceCodeProvider(repository=repository)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repository = new Repository(this, \"Repo\", new RepositoryProps {\n    RepositoryName = \"my-repo\"\n});\n\nApp amplifyApp = new App(this, \"App\", new AppProps {\n    SourceCodeProvider = new CodeCommitSourceCodeProvider(new CodeCommitSourceCodeProviderProps { Repository = repository })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repository = Repository.Builder.create(this, \"Repo\")\n        .repositoryName(\"my-repo\")\n        .build();\n\nApp amplifyApp = App.Builder.create(this, \"App\")\n        .sourceCodeProvider(CodeCommitSourceCodeProvider.Builder.create().repository(repository).build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import codecommit \"github.com/aws/aws-cdk-go/awscdk\"\n\nrepository := codecommit.NewRepository(this, jsii.String(\"Repo\"), &repositoryProps{\n\trepositoryName: jsii.String(\"my-repo\"),\n})\n\namplifyApp := amplify.NewApp(this, jsii.String(\"App\"), &appProps{\n\tsourceCodeProvider: amplify.NewCodeCommitSourceCodeProvider(&codeCommitSourceCodeProviderProps{\n\t\trepository: repository,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from 'aws-cdk-lib/aws-codecommit';\n\nconst repository = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'my-repo',\n});\n\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.CodeCommitSourceCodeProvider({ repository }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.CodeCommitSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.aws_codecommit.IRepository",
        "aws-cdk-lib.aws_codecommit.Repository",
        "aws-cdk-lib.aws_codecommit.RepositoryProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from 'aws-cdk-lib/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repository = new codecommit.Repository(this, 'Repo', {\n  repositoryName: 'my-repo',\n});\n\nconst amplifyApp = new amplify.App(this, 'App', {\n  sourceCodeProvider: new amplify.CodeCommitSourceCodeProvider({ repository }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 2,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "09b311ff47391a00a2b563479ceabb32802a59c56a31d2a39b7dd6cf41689daf"
    },
    "4e00bcef773f49ddc00442b8746eea4d73dc501946a6ca1cb66f2b661384ef6c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\n\ncustom_response_header = amplify_alpha.CustomResponseHeader(\n    headers={\n        \"headers_key\": \"headers\"\n    },\n    pattern=\"pattern\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\n\nCustomResponseHeader customResponseHeader = new CustomResponseHeader {\n    Headers = new Dictionary<string, string> {\n        { \"headersKey\", \"headers\" }\n    },\n    Pattern = \"pattern\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\n\nCustomResponseHeader customResponseHeader = CustomResponseHeader.builder()\n        .headers(Map.of(\n                \"headersKey\", \"headers\"))\n        .pattern(\"pattern\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"\ncustomResponseHeader := &customResponseHeader{\n\theaders: map[string]*string{\n\t\t\"headersKey\": jsii.String(\"headers\"),\n\t},\n\tpattern: jsii.String(\"pattern\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nconst customResponseHeader: amplify_alpha.CustomResponseHeader = {\n  headers: {\n    headersKey: 'headers',\n  },\n  pattern: 'pattern',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.CustomResponseHeader"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.CustomResponseHeader"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst customResponseHeader: amplify_alpha.CustomResponseHeader = {\n  headers: {\n    headersKey: 'headers',\n  },\n  pattern: 'pattern',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c36832fe752393a567fa850fa7d6b8e829fc30b9eb3410f37fa99637204539bf"
    },
    "0cecac43706f54c22f1400342b0be4ab725e8a36c10d1b54cbc953e00675b14a": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\namplify_app.add_custom_rule({\n    \"source\": \"/docs/specific-filename.html\",\n    \"target\": \"/documents/different-filename.html\",\n    \"status\": amplify.RedirectStatus.TEMPORARY_REDIRECT\n})",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\namplifyApp.AddCustomRule(new Dictionary<string, object> {\n    { \"source\", \"/docs/specific-filename.html\" },\n    { \"target\", \"/documents/different-filename.html\" },\n    { \"status\", RedirectStatus.TEMPORARY_REDIRECT }\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\namplifyApp.addCustomRule(Map.of(\n        \"source\", \"/docs/specific-filename.html\",\n        \"target\", \"/documents/different-filename.html\",\n        \"status\", RedirectStatus.TEMPORARY_REDIRECT));",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\namplifyApp.addCustomRule(map[string]interface{}{\n\t\"source\": jsii.String(\"/docs/specific-filename.html\"),\n\t\"target\": jsii.String(\"/documents/different-filename.html\"),\n\t\"status\": amplify.RedirectStatus_TEMPORARY_REDIRECT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\namplifyApp.addCustomRule({\n  source: '/docs/specific-filename.html',\n  target: '/documents/different-filename.html',\n  status: amplify.RedirectStatus.TEMPORARY_REDIRECT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.CustomRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addCustomRule",
        "@aws-cdk/aws-amplify-alpha.CustomRule",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus#TEMPORARY_REDIRECT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\namplifyApp.addCustomRule({\n  source: '/docs/specific-filename.html',\n  target: '/documents/different-filename.html',\n  status: amplify.RedirectStatus.TEMPORARY_REDIRECT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d9207b8ec4a2ae96e3228e62c0617c96848b7cdc4763fd5f7e8a2f75fa1bb9a"
    },
    "311faa4a6c5ce57a9f75317a333e3cd9b31cbf7f0492f90dda7a245b807250cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\n\ncustom_rule_options = amplify_alpha.CustomRuleOptions(\n    source=\"source\",\n    target=\"target\",\n\n    # the properties below are optional\n    condition=\"condition\",\n    status=amplify_alpha.RedirectStatus.REWRITE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\n\nCustomRuleOptions customRuleOptions = new CustomRuleOptions {\n    Source = \"source\",\n    Target = \"target\",\n\n    // the properties below are optional\n    Condition = \"condition\",\n    Status = RedirectStatus.REWRITE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\n\nCustomRuleOptions customRuleOptions = CustomRuleOptions.builder()\n        .source(\"source\")\n        .target(\"target\")\n\n        // the properties below are optional\n        .condition(\"condition\")\n        .status(RedirectStatus.REWRITE)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"\ncustomRuleOptions := &customRuleOptions{\n\tsource: jsii.String(\"source\"),\n\ttarget: jsii.String(\"target\"),\n\n\t// the properties below are optional\n\tcondition: jsii.String(\"condition\"),\n\tstatus: amplify_alpha.redirectStatus_REWRITE,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nconst customRuleOptions: amplify_alpha.CustomRuleOptions = {\n  source: 'source',\n  target: 'target',\n\n  // the properties below are optional\n  condition: 'condition',\n  status: amplify_alpha.RedirectStatus.REWRITE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.CustomRuleOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.CustomRuleOptions",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus#REWRITE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst customRuleOptions: amplify_alpha.CustomRuleOptions = {\n  source: 'source',\n  target: 'target',\n\n  // the properties below are optional\n  condition: 'condition',\n  status: amplify_alpha.RedirectStatus.REWRITE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "676dd362eec8dc98ca476c099f630d1178e1d86311597ee69766055872fd093e"
    },
    "d078e7c19d80df2d60d66f41832dc16c1c1cfb86bf9e0f11a996414280d2df4b": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n# master: amplify.Branch\n# dev: amplify.Branch\n\n\ndomain = amplify_app.add_domain(\"example.com\",\n    enable_auto_subdomain=True,  # in case subdomains should be auto registered for branches\n    auto_subdomain_creation_patterns=[\"*\", \"pr*\"]\n)\ndomain.map_root(master) # map master branch to domain root\ndomain.map_sub_domain(master, \"www\")\ndomain.map_sub_domain(dev)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\nBranch master;\nBranch dev;\n\n\nDomain domain = amplifyApp.AddDomain(\"example.com\", new DomainOptions {\n    EnableAutoSubdomain = true,  // in case subdomains should be auto registered for branches\n    AutoSubdomainCreationPatterns = new [] { \"*\", \"pr*\" }\n});\ndomain.MapRoot(master); // map master branch to domain root\ndomain.MapSubDomain(master, \"www\");\ndomain.MapSubDomain(dev);",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\nBranch master;\nBranch dev;\n\n\nDomain domain = amplifyApp.addDomain(\"example.com\", DomainOptions.builder()\n        .enableAutoSubdomain(true) // in case subdomains should be auto registered for branches\n        .autoSubdomainCreationPatterns(List.of(\"*\", \"pr*\"))\n        .build());\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, \"www\");\ndomain.mapSubDomain(dev);",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\nvar master branch\nvar dev branch\n\ndomain := amplifyApp.addDomain(jsii.String(\"example.com\"), &domainOptions{\n\tenableAutoSubdomain: jsii.Boolean(true),\n\t // in case subdomains should be auto registered for branches\n\tautoSubdomainCreationPatterns: []*string{\n\t\tjsii.String(\"*\"),\n\t\tjsii.String(\"pr*\"),\n\t},\n})\ndomain.mapRoot(master) // map master branch to domain root\ndomain.mapSubDomain(master, jsii.String(\"www\"))\ndomain.mapSubDomain(dev)",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\ndeclare const master: amplify.Branch;\ndeclare const dev: amplify.Branch;\n\nconst domain = amplifyApp.addDomain('example.com', {\n  enableAutoSubdomain: true, // in case subdomains should be auto registered for branches\n  autoSubdomainCreationPatterns: ['*', 'pr*'], // regex for branches that should auto register subdomains\n});\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, 'www');\ndomain.mapSubDomain(dev); // sub domain prefix defaults to branch name",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.Domain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addDomain",
        "@aws-cdk/aws-amplify-alpha.Domain",
        "@aws-cdk/aws-amplify-alpha.Domain#mapRoot",
        "@aws-cdk/aws-amplify-alpha.Domain#mapSubDomain",
        "@aws-cdk/aws-amplify-alpha.DomainOptions",
        "@aws-cdk/aws-amplify-alpha.IBranch"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\ndeclare const master: amplify.Branch;\ndeclare const dev: amplify.Branch;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst domain = amplifyApp.addDomain('example.com', {\n  enableAutoSubdomain: true, // in case subdomains should be auto registered for branches\n  autoSubdomainCreationPatterns: ['*', 'pr*'], // regex for branches that should auto register subdomains\n});\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, 'www');\ndomain.mapSubDomain(dev);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 4,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b3de53d22c6919d98c4bd00545bdbde54b0737b22d7b148a45bd88919af6746f"
    },
    "65d5306e3fced75fe788f380490b00ff62693d7c7fc60b064e75b6191eb5b998": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n# master: amplify.Branch\n# dev: amplify.Branch\n\n\ndomain = amplify_app.add_domain(\"example.com\",\n    enable_auto_subdomain=True,  # in case subdomains should be auto registered for branches\n    auto_subdomain_creation_patterns=[\"*\", \"pr*\"]\n)\ndomain.map_root(master) # map master branch to domain root\ndomain.map_sub_domain(master, \"www\")\ndomain.map_sub_domain(dev)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\nBranch master;\nBranch dev;\n\n\nDomain domain = amplifyApp.AddDomain(\"example.com\", new DomainOptions {\n    EnableAutoSubdomain = true,  // in case subdomains should be auto registered for branches\n    AutoSubdomainCreationPatterns = new [] { \"*\", \"pr*\" }\n});\ndomain.MapRoot(master); // map master branch to domain root\ndomain.MapSubDomain(master, \"www\");\ndomain.MapSubDomain(dev);",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\nBranch master;\nBranch dev;\n\n\nDomain domain = amplifyApp.addDomain(\"example.com\", DomainOptions.builder()\n        .enableAutoSubdomain(true) // in case subdomains should be auto registered for branches\n        .autoSubdomainCreationPatterns(List.of(\"*\", \"pr*\"))\n        .build());\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, \"www\");\ndomain.mapSubDomain(dev);",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\nvar master branch\nvar dev branch\n\ndomain := amplifyApp.addDomain(jsii.String(\"example.com\"), &domainOptions{\n\tenableAutoSubdomain: jsii.Boolean(true),\n\t // in case subdomains should be auto registered for branches\n\tautoSubdomainCreationPatterns: []*string{\n\t\tjsii.String(\"*\"),\n\t\tjsii.String(\"pr*\"),\n\t},\n})\ndomain.mapRoot(master) // map master branch to domain root\ndomain.mapSubDomain(master, jsii.String(\"www\"))\ndomain.mapSubDomain(dev)",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\ndeclare const master: amplify.Branch;\ndeclare const dev: amplify.Branch;\n\nconst domain = amplifyApp.addDomain('example.com', {\n  enableAutoSubdomain: true, // in case subdomains should be auto registered for branches\n  autoSubdomainCreationPatterns: ['*', 'pr*'], // regex for branches that should auto register subdomains\n});\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, 'www');\ndomain.mapSubDomain(dev); // sub domain prefix defaults to branch name",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.DomainOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addDomain",
        "@aws-cdk/aws-amplify-alpha.Domain",
        "@aws-cdk/aws-amplify-alpha.Domain#mapRoot",
        "@aws-cdk/aws-amplify-alpha.Domain#mapSubDomain",
        "@aws-cdk/aws-amplify-alpha.DomainOptions",
        "@aws-cdk/aws-amplify-alpha.IBranch"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\ndeclare const master: amplify.Branch;\ndeclare const dev: amplify.Branch;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst domain = amplifyApp.addDomain('example.com', {\n  enableAutoSubdomain: true, // in case subdomains should be auto registered for branches\n  autoSubdomainCreationPatterns: ['*', 'pr*'], // regex for branches that should auto register subdomains\n});\ndomain.mapRoot(master); // map master branch to domain root\ndomain.mapSubDomain(master, 'www');\ndomain.mapSubDomain(dev);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 4,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b3de53d22c6919d98c4bd00545bdbde54b0737b22d7b148a45bd88919af6746f"
    },
    "4b3d9b39b97232c4931884ff474d4ce69262b9e655ac843e0a1e61a042b32169": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\nfrom aws_cdk import aws_iam as iam\n\n# app: amplify_alpha.App\n# branch: amplify_alpha.Branch\n# role: iam.Role\n\ndomain_props = amplify_alpha.DomainProps(\n    app=app,\n\n    # the properties below are optional\n    auto_subdomain_creation_patterns=[\"autoSubdomainCreationPatterns\"],\n    auto_sub_domain_iam_role=role,\n    domain_name=\"domainName\",\n    enable_auto_subdomain=False,\n    sub_domains=[amplify_alpha.SubDomain(\n        branch=branch,\n\n        # the properties below are optional\n        prefix=\"prefix\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\nusing Amazon.CDK.AWS.IAM;\n\nApp app;\nBranch branch;\nRole role;\n\nDomainProps domainProps = new DomainProps {\n    App = app,\n\n    // the properties below are optional\n    AutoSubdomainCreationPatterns = new [] { \"autoSubdomainCreationPatterns\" },\n    AutoSubDomainIamRole = role,\n    DomainName = \"domainName\",\n    EnableAutoSubdomain = false,\n    SubDomains = new [] { new SubDomain {\n        Branch = branch,\n\n        // the properties below are optional\n        Prefix = \"prefix\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\nimport software.amazon.awscdk.services.iam.*;\n\nApp app;\nBranch branch;\nRole role;\n\nDomainProps domainProps = DomainProps.builder()\n        .app(app)\n\n        // the properties below are optional\n        .autoSubdomainCreationPatterns(List.of(\"autoSubdomainCreationPatterns\"))\n        .autoSubDomainIamRole(role)\n        .domainName(\"domainName\")\n        .enableAutoSubdomain(false)\n        .subDomains(List.of(SubDomain.builder()\n                .branch(branch)\n\n                // the properties below are optional\n                .prefix(\"prefix\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"import awscdk \"github.com/aws/aws-cdk-go/awscdk\"import iam \"github.com/aws/aws-cdk-go/awscdk/aws_iam\"\n\nvar app app\nvar branch branch\nvar role role\ndomainProps := &domainProps{\n\tapp: app,\n\n\t// the properties below are optional\n\tautoSubdomainCreationPatterns: []*string{\n\t\tjsii.String(\"autoSubdomainCreationPatterns\"),\n\t},\n\tautoSubDomainIamRole: role,\n\tdomainName: jsii.String(\"domainName\"),\n\tenableAutoSubdomain: jsii.Boolean(false),\n\tsubDomains: []subDomain{\n\t\t&subDomain{\n\t\t\tbranch: branch,\n\n\t\t\t// the properties below are optional\n\t\t\tprefix: jsii.String(\"prefix\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const app: amplify_alpha.App;\ndeclare const branch: amplify_alpha.Branch;\ndeclare const role: iam.Role;\nconst domainProps: amplify_alpha.DomainProps = {\n  app: app,\n\n  // the properties below are optional\n  autoSubdomainCreationPatterns: ['autoSubdomainCreationPatterns'],\n  autoSubDomainIamRole: role,\n  domainName: 'domainName',\n  enableAutoSubdomain: false,\n  subDomains: [{\n    branch: branch,\n\n    // the properties below are optional\n    prefix: 'prefix',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.DomainProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.DomainProps",
        "@aws-cdk/aws-amplify-alpha.IApp",
        "@aws-cdk/aws-amplify-alpha.IBranch",
        "aws-cdk-lib.aws_iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const app: amplify_alpha.App;\ndeclare const branch: amplify_alpha.Branch;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst domainProps: amplify_alpha.DomainProps = {\n  app: app,\n\n  // the properties below are optional\n  autoSubdomainCreationPatterns: ['autoSubdomainCreationPatterns'],\n  autoSubDomainIamRole: role,\n  domainName: 'domainName',\n  enableAutoSubdomain: false,\n  subDomains: [{\n    branch: branch,\n\n    // the properties below are optional\n    prefix: 'prefix',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 26,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e4fc02d32ee435bca8545a7828d3ff04bc400258545342d09beb0fb9e91285d4"
    },
    "ed14b89a581e13921956d5c77cf5fb8339c5bd6453e27642615c55c3552f5a3a": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    auto_branch_creation=amplify.AutoBranchCreation( # Automatically connect branches that match a pattern set\n        patterns=[\"feature/*\", \"test/*\"]),\n    auto_branch_deletion=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    AutoBranchCreation = new AutoBranchCreation {  // Automatically connect branches that match a pattern set\n        Patterns = new [] { \"feature/*\", \"test/*\" } },\n    AutoBranchDeletion = true\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .autoBranchCreation(AutoBranchCreation.builder() // Automatically connect branches that match a pattern set\n                .patterns(List.of(\"feature/*\", \"test/*\")).build())\n        .autoBranchDeletion(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tautoBranchCreation: &autoBranchCreation{\n\t\t // Automatically connect branches that match a pattern set\n\t\tpatterns: []*string{\n\t\t\tjsii.String(\"feature/*\"),\n\t\t\tjsii.String(\"test/*\"),\n\t\t},\n\t},\n\tautoBranchDeletion: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.AutoBranchCreation",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f7411fc8c8ccf9f8ca4c55bcabe52718fc6f9adbb957704f6ad42be2ad37bfbc"
    },
    "dbac86ade94bce031d9e5ef1e2a2ee2e1672aabcf0f1041d58d71c9be2a98c2c": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitHubSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-github-token\")\n    ),\n    auto_branch_creation=amplify.AutoBranchCreation( # Automatically connect branches that match a pattern set\n        patterns=[\"feature/*\", \"test/*\"]),\n    auto_branch_deletion=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitHubSourceCodeProvider(new GitHubSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-github-token\")\n    }),\n    AutoBranchCreation = new AutoBranchCreation {  // Automatically connect branches that match a pattern set\n        Patterns = new [] { \"feature/*\", \"test/*\" } },\n    AutoBranchDeletion = true\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitHubSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n                .build())\n        .autoBranchCreation(AutoBranchCreation.builder() // Automatically connect branches that match a pattern set\n                .patterns(List.of(\"feature/*\", \"test/*\")).build())\n        .autoBranchDeletion(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitHubSourceCodeProvider(&gitHubSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-github-token\")),\n\t}),\n\tautoBranchCreation: &autoBranchCreation{\n\t\t // Automatically connect branches that match a pattern set\n\t\tpatterns: []*string{\n\t\t\tjsii.String(\"feature/*\"),\n\t\t\tjsii.String(\"test/*\"),\n\t\t},\n\t},\n\tautoBranchDeletion: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.AutoBranchCreation",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitHubSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitHubSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-github-token'),\n  }),\n  autoBranchCreation: { // Automatically connect branches that match a pattern set\n    patterns: ['feature/*', 'test/*'],\n  },\n  autoBranchDeletion: true, // Automatically disconnect a branch when you delete a branch from your repository\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f7411fc8c8ccf9f8ca4c55bcabe52718fc6f9adbb957704f6ad42be2ad37bfbc"
    },
    "9438a7cb44e70ce095c141a6923d3b31c81754a24a590f0399dc410944ceb968": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitLabSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-gitlab-token\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitLabSourceCodeProvider(new GitLabSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-gitlab-token\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitLabSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-gitlab-token\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitLabSourceCodeProvider(&gitLabSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-gitlab-token\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitLabSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-gitlab-token'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitLabSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-gitlab-token'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c3a044f0ebb93ff6f45ced4d239855cf72b21057ffdf6510d8b84b6e3dabb7c5"
    },
    "7b546780426af985a35b9338687b5ee4a5026632c81065911b58eedec90d6956": {
      "translations": {
        "python": {
          "source": "amplify_app = amplify.App(self, \"MyApp\",\n    source_code_provider=amplify.GitLabSourceCodeProvider(\n        owner=\"<user>\",\n        repository=\"<repo>\",\n        oauth_token=SecretValue.secrets_manager(\"my-gitlab-token\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp = new App(this, \"MyApp\", new AppProps {\n    SourceCodeProvider = new GitLabSourceCodeProvider(new GitLabSourceCodeProviderProps {\n        Owner = \"<user>\",\n        Repository = \"<repo>\",\n        OauthToken = SecretValue.SecretsManager(\"my-gitlab-token\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp = App.Builder.create(this, \"MyApp\")\n        .sourceCodeProvider(GitLabSourceCodeProvider.Builder.create()\n                .owner(\"<user>\")\n                .repository(\"<repo>\")\n                .oauthToken(SecretValue.secretsManager(\"my-gitlab-token\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "amplifyApp := amplify.NewApp(this, jsii.String(\"MyApp\"), &appProps{\n\tsourceCodeProvider: amplify.NewGitLabSourceCodeProvider(&gitLabSourceCodeProviderProps{\n\t\towner: jsii.String(\"<user>\"),\n\t\trepository: jsii.String(\"<repo>\"),\n\t\toauthToken: secretValue.secretsManager(jsii.String(\"my-gitlab-token\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "const amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitLabSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-gitlab-token'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App",
        "@aws-cdk/aws-amplify-alpha.AppProps",
        "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProvider",
        "@aws-cdk/aws-amplify-alpha.GitLabSourceCodeProviderProps",
        "@aws-cdk/aws-amplify-alpha.ISourceCodeProvider",
        "aws-cdk-lib.SecretValue",
        "aws-cdk-lib.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst amplifyApp = new amplify.App(this, 'MyApp', {\n  sourceCodeProvider: new amplify.GitLabSourceCodeProvider({\n    owner: '<user>',\n    repository: '<repo>',\n    oauthToken: SecretValue.secretsManager('my-gitlab-token'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c3a044f0ebb93ff6f45ced4d239855cf72b21057ffdf6510d8b84b6e3dabb7c5"
    },
    "8a452caf2996d550e3f443c0f687ef3e036eb961a9fa64f095f8afa5bece0029": {
      "translations": {
        "python": {
          "source": "# amplify_app: amplify.App\n\namplify_app.add_custom_rule({\n    \"source\": \"/docs/specific-filename.html\",\n    \"target\": \"/documents/different-filename.html\",\n    \"status\": amplify.RedirectStatus.TEMPORARY_REDIRECT\n})",
          "version": "2"
        },
        "csharp": {
          "source": "App amplifyApp;\n\namplifyApp.AddCustomRule(new Dictionary<string, object> {\n    { \"source\", \"/docs/specific-filename.html\" },\n    { \"target\", \"/documents/different-filename.html\" },\n    { \"status\", RedirectStatus.TEMPORARY_REDIRECT }\n});",
          "version": "1"
        },
        "java": {
          "source": "App amplifyApp;\n\namplifyApp.addCustomRule(Map.of(\n        \"source\", \"/docs/specific-filename.html\",\n        \"target\", \"/documents/different-filename.html\",\n        \"status\", RedirectStatus.TEMPORARY_REDIRECT));",
          "version": "1"
        },
        "go": {
          "source": "var amplifyApp app\namplifyApp.addCustomRule(map[string]interface{}{\n\t\"source\": jsii.String(\"/docs/specific-filename.html\"),\n\t\"target\": jsii.String(\"/documents/different-filename.html\"),\n\t\"status\": amplify.RedirectStatus_TEMPORARY_REDIRECT,\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const amplifyApp: amplify.App;\namplifyApp.addCustomRule({\n  source: '/docs/specific-filename.html',\n  target: '/documents/different-filename.html',\n  status: amplify.RedirectStatus.TEMPORARY_REDIRECT,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.RedirectStatus"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.App#addCustomRule",
        "@aws-cdk/aws-amplify-alpha.CustomRule",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus",
        "@aws-cdk/aws-amplify-alpha.RedirectStatus#TEMPORARY_REDIRECT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const amplifyApp: amplify.App;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { SecretValue, Stack } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport * as amplify from '@aws-cdk/aws-amplify-alpha';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\namplifyApp.addCustomRule({\n  source: '/docs/specific-filename.html',\n  target: '/documents/different-filename.html',\n  status: amplify.RedirectStatus.TEMPORARY_REDIRECT,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d9207b8ec4a2ae96e3228e62c0617c96848b7cdc4763fd5f7e8a2f75fa1bb9a"
    },
    "adad5223eed7aacb3d79f16afd4a1e04411cd20f10326fb0f6802513d936c5c1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\nimport aws_cdk as cdk\n\n# secret_value: cdk.SecretValue\n\nsource_code_provider_config = amplify_alpha.SourceCodeProviderConfig(\n    repository=\"repository\",\n\n    # the properties below are optional\n    access_token=secret_value,\n    oauth_token=secret_value\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\nusing Amazon.CDK;\n\nSecretValue secretValue;\n\nSourceCodeProviderConfig sourceCodeProviderConfig = new SourceCodeProviderConfig {\n    Repository = \"repository\",\n\n    // the properties below are optional\n    AccessToken = secretValue,\n    OauthToken = secretValue\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\nimport software.amazon.awscdk.*;\n\nSecretValue secretValue;\n\nSourceCodeProviderConfig sourceCodeProviderConfig = SourceCodeProviderConfig.builder()\n        .repository(\"repository\")\n\n        // the properties below are optional\n        .accessToken(secretValue)\n        .oauthToken(secretValue)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"import cdk \"github.com/aws/aws-cdk-go/awscdk\"\n\nvar secretValue secretValue\nsourceCodeProviderConfig := &sourceCodeProviderConfig{\n\trepository: jsii.String(\"repository\"),\n\n\t// the properties below are optional\n\taccessToken: secretValue,\n\toauthToken: secretValue,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const secretValue: cdk.SecretValue;\nconst sourceCodeProviderConfig: amplify_alpha.SourceCodeProviderConfig = {\n  repository: 'repository',\n\n  // the properties below are optional\n  accessToken: secretValue,\n  oauthToken: secretValue,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.SourceCodeProviderConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.SourceCodeProviderConfig",
        "aws-cdk-lib.SecretValue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const secretValue: cdk.SecretValue;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sourceCodeProviderConfig: amplify_alpha.SourceCodeProviderConfig = {\n  repository: 'repository',\n\n  // the properties below are optional\n  accessToken: secretValue,\n  oauthToken: secretValue,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f890dd727062feea9d117f8f10b83848569a1ca6d121ae904118f35e2175a4a7"
    },
    "a4a94b96c4281acdc3954c4c8f9b8cf5903bbee79a02fe6ed36cb8b4c1fdf73a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_amplify_alpha as amplify_alpha\n\n# branch: amplify_alpha.Branch\n\nsub_domain = amplify_alpha.SubDomain(\n    branch=branch,\n\n    # the properties below are optional\n    prefix=\"prefix\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Amplify.Alpha;\n\nBranch branch;\n\nSubDomain subDomain = new SubDomain {\n    Branch = branch,\n\n    // the properties below are optional\n    Prefix = \"prefix\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.amplify.alpha.*;\n\nBranch branch;\n\nSubDomain subDomain = SubDomain.builder()\n        .branch(branch)\n\n        // the properties below are optional\n        .prefix(\"prefix\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import amplify_alpha \"github.com/aws/aws-cdk-go/awscdkamplifyalpha\"\n\nvar branch branch\nsubDomain := &subDomain{\n\tbranch: branch,\n\n\t// the properties below are optional\n\tprefix: jsii.String(\"prefix\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\n\ndeclare const branch: amplify_alpha.Branch;\nconst subDomain: amplify_alpha.SubDomain = {\n  branch: branch,\n\n  // the properties below are optional\n  prefix: 'prefix',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-amplify-alpha.SubDomain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-amplify-alpha.IBranch",
        "@aws-cdk/aws-amplify-alpha.SubDomain"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as amplify_alpha from '@aws-cdk/aws-amplify-alpha';\n\ndeclare const branch: amplify_alpha.Branch;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"constructs\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst subDomain: amplify_alpha.SubDomain = {\n  branch: branch,\n\n  // the properties below are optional\n  prefix: 'prefix',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9fada8c02b2c002aaa186dca4f5fd49712992e4b21b9b75a9ef5774c10e6b844"
    }
  }
}
